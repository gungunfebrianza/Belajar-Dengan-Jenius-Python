import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "private/qquick3dabstractlight_p.h"
        name: "QQuick3DAbstractLight"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Light 1.14", "QtQuick3D/Light 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "QSSGShadowMapQuality"
            values: [
                "ShadowMapQualityLow",
                "ShadowMapQualityMedium",
                "ShadowMapQualityHigh",
                "ShadowMapQualityVeryHigh"
            ]
        }
        Property { name: "color"; type: "QColor" }
        Property { name: "ambientColor"; type: "QColor" }
        Property { name: "brightness"; type: "float" }
        Property { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        Property { name: "castsShadow"; type: "bool" }
        Property { name: "shadowBias"; type: "float" }
        Property { name: "shadowFactor"; type: "float" }
        Property { name: "shadowMapQuality"; type: "QSSGShadowMapQuality" }
        Property { name: "shadowMapFar"; type: "float" }
        Property { name: "shadowFilter"; type: "float" }
        Method {
            name: "setColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setAmbientColor"
            Parameter { name: "ambientColor"; type: "QColor" }
        }
        Method {
            name: "setBrightness"
            Parameter { name: "brightness"; type: "float" }
        }
        Method {
            name: "setScope"
            Parameter { name: "scope"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setCastsShadow"
            Parameter { name: "castsShadow"; type: "bool" }
        }
        Method {
            name: "setShadowBias"
            Parameter { name: "shadowBias"; type: "float" }
        }
        Method {
            name: "setShadowFactor"
            Parameter { name: "shadowFactor"; type: "float" }
        }
        Method {
            name: "setShadowMapQuality"
            Parameter { name: "shadowMapQuality"; type: "QSSGShadowMapQuality" }
        }
        Method {
            name: "setShadowMapFar"
            Parameter { name: "shadowMapFar"; type: "float" }
        }
        Method {
            name: "setShadowFilter"
            Parameter { name: "shadowFilter"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dcamera_p.h"
        name: "QQuick3DCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Camera 1.14", "QtQuick3D/Camera 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "frustumCullingEnabled"; type: "bool" }
        Method {
            name: "setFrustumCullingEnabled"
            Parameter { name: "frustumCullingEnabled"; type: "bool" }
        }
        Method {
            name: "mapToViewport"
            type: "QVector3D"
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "mapFromViewport"
            type: "QVector3D"
            Parameter { name: "viewportPos"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            revision: 257
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            revision: 257
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dcustomcamera_p.h"
        name: "QQuick3DCustomCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: ["QtQuick3D/CustomCamera 1.14", "QtQuick3D/CustomCamera 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "projection"; type: "QMatrix4x4" }
        Method {
            name: "setProjection"
            Parameter { name: "projection"; type: "QMatrix4x4" }
        }
    }
    Component {
        file: "private/qquick3dcustommaterial_p.h"
        name: "QQuick3DCustomMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: [
            "QtQuick3D/CustomMaterial 1.14",
            "QtQuick3D/CustomMaterial 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "ShadingMode"
            values: ["Unshaded", "Shaded"]
        }
        Enum {
            name: "BlendMode"
            values: [
                "NoBlend",
                "Zero",
                "One",
                "SrcColor",
                "OneMinusSrcColor",
                "DstColor",
                "OneMinusDstColor",
                "SrcAlpha",
                "OneMinusSrcAlpha",
                "DstAlpha",
                "OneMinusDstAlpha",
                "ConstantColor",
                "OneMinusConstantColor",
                "ConstantAlpha",
                "OneMinusConstantAlpha",
                "SrcAlphaSaturate"
            ]
        }
        Property { name: "shadingMode"; type: "ShadingMode" }
        Property { name: "fragmentShader"; type: "QUrl" }
        Property { name: "vertexShader"; type: "QUrl" }
        Property { name: "sourceBlend"; type: "BlendMode" }
        Property { name: "destinationBlend"; type: "BlendMode" }
        Property { name: "alwaysDirty"; type: "bool" }
        Property { name: "lineWidth"; type: "float" }
        Signal { name: "srcBlendChanged" }
        Signal { name: "dstBlendChanged" }
        Method {
            name: "setShadingMode"
            Parameter { name: "mode"; type: "ShadingMode" }
        }
        Method {
            name: "setVertexShader"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setFragmentShader"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "setSrcBlend"
            Parameter { name: "mode"; type: "BlendMode" }
        }
        Method {
            name: "setDstBlend"
            Parameter { name: "mode"; type: "BlendMode" }
        }
        Method {
            name: "setAlwaysDirty"
            Parameter { name: "alwaysDirty"; type: "bool" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
        Method { name: "onPropertyDirty" }
        Method { name: "onTextureDirty" }
    }
    Component {
        file: "private/qquick3ddefaultmaterial_p.h"
        name: "QQuick3DDefaultMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: [
            "QtQuick3D/DefaultMaterial 1.14",
            "QtQuick3D/DefaultMaterial 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "Lighting"
            values: ["NoLighting", "FragmentLighting"]
        }
        Enum {
            name: "BlendMode"
            values: ["SourceOver", "Screen", "Multiply"]
        }
        Enum {
            name: "SpecularModel"
            values: ["Default", "KGGX"]
        }
        Property { name: "lighting"; type: "Lighting" }
        Property { name: "blendMode"; type: "BlendMode" }
        Property { name: "diffuseColor"; type: "QColor" }
        Property { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "emissiveFactor"; type: "float" }
        Property { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "emissiveColor"; type: "QColor" }
        Property { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "specularModel"; type: "SpecularModel" }
        Property { name: "specularTint"; type: "QColor" }
        Property { name: "indexOfRefraction"; type: "float" }
        Property { name: "fresnelPower"; type: "float" }
        Property { name: "specularAmount"; type: "float" }
        Property { name: "specularRoughness"; type: "float" }
        Property { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "roughnessChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "opacity"; type: "float" }
        Property { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "opacityChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "bumpAmount"; type: "float" }
        Property { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "translucencyChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "translucentFalloff"; type: "float" }
        Property { name: "diffuseLightWrap"; type: "float" }
        Property { name: "vertexColorsEnabled"; type: "bool" }
        Property { name: "pointSize"; type: "float" }
        Property { name: "lineWidth"; type: "float" }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "Lighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "BlendMode" }
        }
        Signal {
            name: "diffuseColorChanged"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Signal {
            name: "diffuseMapChanged"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveFactorChanged"
            Parameter { name: "emissiveFactor"; type: "float" }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveColorChanged"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularModelChanged"
            Parameter { name: "specularModel"; type: "SpecularModel" }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Signal {
            name: "indexOfRefractionChanged"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Signal {
            name: "fresnelPowerChanged"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "specularRoughnessChanged"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpMapChanged"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "bumpAmountChanged"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucencyMapChanged"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "translucentFalloffChanged"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Signal {
            name: "diffuseLightWrapChanged"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Signal {
            name: "vertexColorsEnabledChanged"
            Parameter { name: "vertexColorsEnabled"; type: "bool" }
        }
        Signal {
            name: "roughnessChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Signal {
            name: "opacityChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Signal {
            name: "translucencyChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "Lighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "BlendMode" }
        }
        Method {
            name: "setDiffuseColor"
            Parameter { name: "diffuseColor"; type: "QColor" }
        }
        Method {
            name: "setDiffuseMap"
            Parameter { name: "diffuseMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveFactor"
            Parameter { name: "emissiveFactor"; type: "float" }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveColor"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularModel"
            Parameter { name: "specularModel"; type: "SpecularModel" }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "QColor" }
        }
        Method {
            name: "setIndexOfRefraction"
            Parameter { name: "indexOfRefraction"; type: "float" }
        }
        Method {
            name: "setFresnelPower"
            Parameter { name: "fresnelPower"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setSpecularRoughness"
            Parameter { name: "specularRoughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpMap"
            Parameter { name: "bumpMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setBumpAmount"
            Parameter { name: "bumpAmount"; type: "float" }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucencyMap"
            Parameter { name: "translucencyMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setTranslucentFalloff"
            Parameter { name: "translucentFalloff"; type: "float" }
        }
        Method {
            name: "setDiffuseLightWrap"
            Parameter { name: "diffuseLightWrap"; type: "float" }
        }
        Method {
            name: "setVertexColorsEnabled"
            Parameter { name: "vertexColorsEnabled"; type: "bool" }
        }
        Method {
            name: "setRoughnessChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setOpacityChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setTranslucencyChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setPointSize"
            Parameter { name: "size"; type: "float" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3ddirectionallight_p.h"
        name: "QQuick3DDirectionalLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: [
            "QtQuick3D/DirectionalLight 1.14",
            "QtQuick3D/DirectionalLight 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
    }
    Component {
        file: "private/qquick3deffect_p.h"
        name: "QQuick3DEffect"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Effect 1.15", "QtQuick3D/Effect 6.0"]
        exportMetaObjectRevisions: [271, 1536]
        Property { name: "passes"; type: "QQuick3DShaderUtilsRenderPass"; isList: true; isReadonly: true }
        Method { name: "onPropertyDirty" }
        Method { name: "onTextureDirty" }
    }
    Component {
        file: "private/qquick3dfrustumcamera_p.h"
        name: "QQuick3DFrustumCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DPerspectiveCamera"
        exports: [
            "QtQuick3D/FrustumCamera 1.14",
            "QtQuick3D/FrustumCamera 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "top"; type: "float" }
        Property { name: "bottom"; type: "float" }
        Property { name: "right"; type: "float" }
        Property { name: "left"; type: "float" }
        Method {
            name: "setTop"
            Parameter { name: "top"; type: "float" }
        }
        Method {
            name: "setBottom"
            Parameter { name: "bottom"; type: "float" }
        }
        Method {
            name: "setRight"
            Parameter { name: "right"; type: "float" }
        }
        Method {
            name: "setLeft"
            Parameter { name: "left"; type: "float" }
        }
    }
    Component {
        file: "qquick3dgeometry.h"
        name: "QQuick3DGeometry"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Geometry 1.14", "QtQuick3D/Geometry 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [270, 1536]
        Signal { name: "geometryNodeDirty" }
    }
    Component {
        file: "private/qquick3djoint_p.h"
        name: "QQuick3DJoint"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Joint 1.15", "QtQuick3D/Joint 6.0"]
        exportMetaObjectRevisions: [271, 1536]
        Property { name: "index"; type: "int" }
        Property { name: "skeletonRoot"; type: "QQuick3DSkeleton"; isPointer: true }
        Method {
            name: "setIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setSkeletonRoot"
            Parameter { name: "skeleton"; type: "QQuick3DSkeleton"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dloader_p.h"
        name: "QQuick3DLoader"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Loader3D 1.14", "QtQuick3D/Loader3D 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "Status"
            values: ["Null", "Ready", "Loading", "Error"]
        }
        Property { name: "active"; type: "bool" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "item"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "asynchronous"; type: "bool" }
        Signal { name: "loaded" }
        Method { name: "sourceLoaded" }
        Method {
            name: "setSource"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dmaterial_p.h"
        name: "QQuick3DMaterial"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Material 1.14", "QtQuick3D/Material 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "CullMode"
            values: ["BackFaceCulling", "FrontFaceCulling", "NoCulling"]
        }
        Enum {
            name: "TextureChannelMapping"
            values: ["R", "G", "B", "A"]
        }
        Property { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "cullMode"; type: "CullMode" }
        Signal {
            name: "lightmapIndirectChanged"
            Parameter { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "lightmapRadiosityChanged"
            Parameter { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "lightmapShadowChanged"
            Parameter { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "lightProbeChanged"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "cullModeChanged"
            Parameter { name: "cullMode"; type: "CullMode" }
        }
        Method {
            name: "setLightmapIndirect"
            Parameter { name: "lightmapIndirect"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setLightmapRadiosity"
            Parameter { name: "lightmapRadiosity"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setLightmapShadow"
            Parameter { name: "lightmapShadow"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setCullMode"
            Parameter { name: "cullMode"; type: "CullMode" }
        }
    }
    Component {
        file: "private/qquick3dmodel_p.h"
        name: "QQuick3DModel"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Model 1.14", "QtQuick3D/Model 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "source"; type: "QUrl" }
        Property { name: "castsShadows"; type: "bool" }
        Property { name: "receivesShadows"; type: "bool" }
        Property { name: "materials"; type: "QQuick3DMaterial"; isList: true; isReadonly: true }
        Property { name: "pickable"; type: "bool" }
        Property { name: "geometry"; type: "QQuick3DGeometry"; isPointer: true }
        Property { name: "skeleton"; type: "QQuick3DSkeleton"; isPointer: true }
        Property { name: "inverseBindPoses"; type: "QList<QMatrix4x4>" }
        Property { name: "bounds"; revision: 257; type: "QQuick3DBounds3"; isReadonly: true }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setCastsShadows"
            Parameter { name: "castsShadows"; type: "bool" }
        }
        Method {
            name: "setReceivesShadows"
            Parameter { name: "receivesShadows"; type: "bool" }
        }
        Method {
            name: "setPickable"
            Parameter { name: "pickable"; type: "bool" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "geometry"; type: "QQuick3DGeometry"; isPointer: true }
        }
        Method {
            name: "setSkeleton"
            Parameter { name: "skeleton"; type: "QQuick3DSkeleton"; isPointer: true }
        }
        Method {
            name: "setInverseBindPoses"
            Parameter { name: "poses"; type: "QList<QMatrix4x4>" }
        }
        Method {
            name: "setBounds"
            Parameter { name: "min"; type: "QVector3D" }
            Parameter { name: "max"; type: "QVector3D" }
        }
        Method {
            name: "onMaterialDestroyed"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dnode_p.h"
        name: "QQuick3DNode"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Node 1.14", "QtQuick3D/Node 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "TransformSpace"
            values: ["LocalSpace", "ParentSpace", "SceneSpace"]
        }
        Enum {
            name: "StaticFlags"
            values: ["None"]
        }
        Property { name: "x"; type: "float" }
        Property { name: "y"; type: "float" }
        Property { name: "z"; type: "float" }
        Property { name: "rotation"; revision: 257; type: "QQuaternion" }
        Property { name: "eulerRotation"; revision: 257; type: "QVector3D" }
        Property { name: "position"; type: "QVector3D" }
        Property { name: "scale"; type: "QVector3D" }
        Property { name: "pivot"; type: "QVector3D" }
        Property { name: "opacity"; type: "float" }
        Property { name: "visible"; type: "bool" }
        Property { name: "forward"; type: "QVector3D"; isReadonly: true }
        Property { name: "up"; type: "QVector3D"; isReadonly: true }
        Property { name: "right"; type: "QVector3D"; isReadonly: true }
        Property { name: "scenePosition"; type: "QVector3D"; isReadonly: true }
        Property { name: "sceneRotation"; revision: 257; type: "QQuaternion"; isReadonly: true }
        Property { name: "sceneScale"; type: "QVector3D"; isReadonly: true }
        Property { name: "sceneTransform"; type: "QMatrix4x4"; isReadonly: true }
        Property { name: "staticFlags"; revision: 257; type: "int" }
        Signal { name: "rotationChanged"; revision: 257 }
        Signal { name: "eulerRotationChanged"; revision: 257 }
        Signal { name: "localOpacityChanged" }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "float" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "setRotation"
            revision: 257
            Parameter { name: "rotation"; type: "QQuaternion" }
        }
        Method {
            name: "setEulerRotation"
            revision: 257
            Parameter { name: "eulerRotation"; type: "QVector3D" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "QVector3D" }
        }
        Method {
            name: "setScale"
            Parameter { name: "scale"; type: "QVector3D" }
        }
        Method {
            name: "setPivot"
            Parameter { name: "pivot"; type: "QVector3D" }
        }
        Method {
            name: "setLocalOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setStaticFlags"
            Parameter { name: "staticFlags"; type: "int" }
        }
        Method {
            name: "rotate"
            Parameter { name: "degrees"; type: "double" }
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "space"; type: "TransformSpace" }
        }
        Method {
            name: "mapPositionToScene"
            type: "QVector3D"
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromScene"
            type: "QVector3D"
            Parameter { name: "scenePosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapPositionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
            Parameter { name: "localPosition"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToScene"
            type: "QVector3D"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromScene"
            type: "QVector3D"
            Parameter { name: "sceneDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionToNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "mapDirectionFromNode"
            type: "QVector3D"
            Parameter { name: "node"; type: "QQuick3DNode"; isPointer: true }
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
    }
    Component {
        file: "qquick3dobject.h"
        name: "QQuick3DObject"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["QtQuick3D/Object3D 1.14", "QtQuick3D/Object3D 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "parent"; type: "QQuick3DObject"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuick3DObject"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "QString" }
        Method { name: "update" }
        Method {
            name: "setParentItem"
            Parameter { name: "parentItem"; type: "QQuick3DObject"; isPointer: true }
        }
        Method {
            name: "_q_resourceObjectDeleted"
            Parameter { type: "QObject"; isPointer: true }
        }
        Method {
            name: "_q_createJSWrapper"
            type: "qulonglong"
            Parameter { type: "QV4::ExecutionEngine"; isPointer: true }
        }
        Method { name: "_q_cleanupContentItem2D" }
    }
    Component {
        file: "private/qquick3dorthographiccamera_p.h"
        name: "QQuick3DOrthographicCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: [
            "QtQuick3D/OrthographicCamera 1.14",
            "QtQuick3D/OrthographicCamera 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "clipNear"; type: "float" }
        Property { name: "clipFar"; type: "float" }
        Property { name: "horizontalMagnification"; type: "float" }
        Property { name: "verticalMagnification"; type: "float" }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setHorizontalMagnification"
            Parameter { name: "horizontalMagnification"; type: "float" }
        }
        Method {
            name: "setVerticalMagnification"
            Parameter { name: "horizontalMagnification"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dperspectivecamera_p.h"
        name: "QQuick3DPerspectiveCamera"
        accessSemantics: "reference"
        prototype: "QQuick3DCamera"
        exports: [
            "QtQuick3D/PerspectiveCamera 1.14",
            "QtQuick3D/PerspectiveCamera 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "FieldOfViewOrientation"
            values: ["Vertical", "Horizontal"]
        }
        Property { name: "clipNear"; type: "float" }
        Property { name: "clipFar"; type: "float" }
        Property { name: "fieldOfView"; type: "float" }
        Property { name: "fieldOfViewOrientation"; type: "FieldOfViewOrientation" }
        Method {
            name: "setClipNear"
            Parameter { name: "clipNear"; type: "float" }
        }
        Method {
            name: "setClipFar"
            Parameter { name: "clipFar"; type: "float" }
        }
        Method {
            name: "setFieldOfView"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Method {
            name: "setFieldOfViewOrientation"
            Parameter { name: "fieldOfViewOrientation"; type: "FieldOfViewOrientation" }
        }
    }
    Component {
        file: "private/qquick3dpointlight_p.h"
        name: "QQuick3DPointLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: ["QtQuick3D/PointLight 1.14", "QtQuick3D/PointLight 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "constantFade"; type: "float" }
        Property { name: "linearFade"; type: "float" }
        Property { name: "quadraticFade"; type: "float" }
        Method {
            name: "setConstantFade"
            Parameter { name: "constantFade"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setQuadraticFade"
            Parameter { name: "quadraticFade"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dprincipledmaterial_p.h"
        name: "QQuick3DPrincipledMaterial"
        accessSemantics: "reference"
        prototype: "QQuick3DMaterial"
        exports: [
            "QtQuick3D/PrincipledMaterial 1.14",
            "QtQuick3D/PrincipledMaterial 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "Lighting"
            values: ["NoLighting", "FragmentLighting"]
        }
        Enum {
            name: "BlendMode"
            values: ["SourceOver", "Screen", "Multiply"]
        }
        Enum {
            name: "AlphaMode"
            values: ["Default", "Mask", "Blend", "Opaque"]
        }
        Property { name: "lighting"; type: "Lighting" }
        Property { name: "blendMode"; type: "BlendMode" }
        Property { name: "baseColor"; type: "QColor" }
        Property { name: "baseColorMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "metalness"; type: "float" }
        Property { name: "metalnessMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "metalnessChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "specularAmount"; type: "float" }
        Property { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "specularTint"; type: "float" }
        Property { name: "roughness"; type: "float" }
        Property { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "roughnessChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "emissiveColor"; type: "QColor" }
        Property { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "opacity"; type: "float" }
        Property { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "opacityChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "normalStrength"; type: "float" }
        Property { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "occlusionMap"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "occlusionChannel"; revision: 257; type: "TextureChannelMapping" }
        Property { name: "occlusionAmount"; type: "float" }
        Property { name: "alphaMode"; type: "AlphaMode" }
        Property { name: "alphaCutoff"; type: "float" }
        Property { name: "pointSize"; type: "float" }
        Property { name: "lineWidth"; type: "float" }
        Signal {
            name: "lightingChanged"
            Parameter { name: "lighting"; type: "Lighting" }
        }
        Signal {
            name: "blendModeChanged"
            Parameter { name: "blendMode"; type: "BlendMode" }
        }
        Signal {
            name: "baseColorChanged"
            Parameter { name: "baseColor"; type: "QColor" }
        }
        Signal {
            name: "baseColorMapChanged"
            Parameter { name: "baseColorMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveMapChanged"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "emissiveColorChanged"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Signal {
            name: "specularReflectionMapChanged"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularMapChanged"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "specularTintChanged"
            Parameter { name: "specularTint"; type: "float" }
        }
        Signal {
            name: "specularAmountChanged"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Signal {
            name: "roughnessChanged"
            Parameter { name: "roughness"; type: "float" }
        }
        Signal {
            name: "roughnessMapChanged"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            Parameter { name: "opacity"; type: "float" }
        }
        Signal {
            name: "opacityMapChanged"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "normalMapChanged"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "metalnessChanged"
            Parameter { name: "metalness"; type: "float" }
        }
        Signal {
            name: "metalnessMapChanged"
            Parameter { name: "metalnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "normalStrengthChanged"
            Parameter { name: "normalStrength"; type: "float" }
        }
        Signal {
            name: "occlusionMapChanged"
            Parameter { name: "occlusionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Signal {
            name: "occlusionAmountChanged"
            Parameter { name: "occlusionAmount"; type: "float" }
        }
        Signal {
            name: "alphaModeChanged"
            Parameter { name: "alphaMode"; type: "AlphaMode" }
        }
        Signal {
            name: "alphaCutoffChanged"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Signal {
            name: "metalnessChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Signal {
            name: "roughnessChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Signal {
            name: "opacityChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Signal {
            name: "occlusionChannelChanged"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setLighting"
            Parameter { name: "lighting"; type: "Lighting" }
        }
        Method {
            name: "setBlendMode"
            Parameter { name: "blendMode"; type: "BlendMode" }
        }
        Method {
            name: "setBaseColor"
            Parameter { name: "baseColor"; type: "QColor" }
        }
        Method {
            name: "setBaseColorMap"
            Parameter { name: "baseColorMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveMap"
            Parameter { name: "emissiveMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setEmissiveColor"
            Parameter { name: "emissiveColor"; type: "QColor" }
        }
        Method {
            name: "setSpecularReflectionMap"
            Parameter { name: "specularReflectionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularMap"
            Parameter { name: "specularMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setSpecularTint"
            Parameter { name: "specularTint"; type: "float" }
        }
        Method {
            name: "setSpecularAmount"
            Parameter { name: "specularAmount"; type: "float" }
        }
        Method {
            name: "setRoughness"
            Parameter { name: "roughness"; type: "float" }
        }
        Method {
            name: "setRoughnessMap"
            Parameter { name: "roughnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOpacity"
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "setOpacityMap"
            Parameter { name: "opacityMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setNormalMap"
            Parameter { name: "normalMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setMetalness"
            Parameter { name: "metalnessAmount"; type: "float" }
        }
        Method {
            name: "setMetalnessMap"
            Parameter { name: "metalnessMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setNormalStrength"
            Parameter { name: "normalStrength"; type: "float" }
        }
        Method {
            name: "setOcclusionMap"
            Parameter { name: "occlusionMap"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setOcclusionAmount"
            Parameter { name: "occlusionAmount"; type: "float" }
        }
        Method {
            name: "setAlphaMode"
            Parameter { name: "alphaMode"; type: "AlphaMode" }
        }
        Method {
            name: "setAlphaCutoff"
            Parameter { name: "alphaCutoff"; type: "float" }
        }
        Method {
            name: "setMetalnessChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setRoughnessChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setOpacityChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setOcclusionChannel"
            revision: 257
            Parameter { name: "channel"; type: "TextureChannelMapping" }
        }
        Method {
            name: "setPointSize"
            Parameter { name: "size"; type: "float" }
        }
        Method {
            name: "setLineWidth"
            Parameter { name: "width"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dquaternionanimation_p.h"
        name: "QQuick3DQuaternionAnimation"
        accessSemantics: "reference"
        prototype: "QQuickPropertyAnimation"
        exports: [
            "QtQuick3D/QuaternionAnimation 1.15",
            "QtQuick3D/QuaternionAnimation 2.0",
            "QtQuick3D/QuaternionAnimation 2.12",
            "QtQuick3D/QuaternionAnimation 6.0"
        ]
        exportMetaObjectRevisions: [271, 512, 524, 1536]
        Enum {
            name: "Type"
            values: ["Slerp", "Nlerp"]
        }
        Property { name: "from"; type: "QQuaternion" }
        Property { name: "to"; type: "QQuaternion" }
        Property { name: "type"; type: "Type" }
        Property { name: "fromXRotation"; type: "float" }
        Property { name: "fromYRotation"; type: "float" }
        Property { name: "fromZRotation"; type: "float" }
        Property { name: "toXRotation"; type: "float" }
        Property { name: "toYRotation"; type: "float" }
        Property { name: "toZRotation"; type: "float" }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "Type" }
        }
        Signal {
            name: "fromXRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "fromYRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "fromZRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toXRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toYRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
        Signal {
            name: "toZRotationChanged"
            Parameter { name: "value"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dquaternionutils_p.h"
        name: "QQuick3DQuaternionUtils"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Quaternion 1.15", "QtQuick3D/Quaternion 6.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [271, 1536]
        Method {
            name: "fromAxesAndAngles"
            type: "QQuaternion"
            Parameter { name: "axis1"; type: "QVector3D" }
            Parameter { name: "angle1"; type: "float" }
            Parameter { name: "axis2"; type: "QVector3D" }
            Parameter { name: "angle2"; type: "float" }
            Parameter { name: "axis3"; type: "QVector3D" }
            Parameter { name: "angle3"; type: "float" }
        }
        Method {
            name: "fromAxesAndAngles"
            type: "QQuaternion"
            Parameter { name: "axis1"; type: "QVector3D" }
            Parameter { name: "angle1"; type: "float" }
            Parameter { name: "axis2"; type: "QVector3D" }
            Parameter { name: "angle2"; type: "float" }
        }
        Method {
            name: "fromAxisAndAngle"
            type: "QQuaternion"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "z"; type: "float" }
            Parameter { name: "angle"; type: "float" }
        }
        Method {
            name: "fromAxisAndAngle"
            type: "QQuaternion"
            Parameter { name: "axis"; type: "QVector3D" }
            Parameter { name: "angle"; type: "float" }
        }
        Method {
            name: "fromEulerAngles"
            type: "QQuaternion"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "z"; type: "float" }
        }
        Method {
            name: "fromEulerAngles"
            type: "QQuaternion"
            Parameter { name: "eulerAngles"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            revision: 257
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
            Parameter { name: "forwardDirection"; type: "QVector3D" }
            Parameter { name: "upDirection"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            revision: 257
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
            Parameter { name: "forwardDirection"; type: "QVector3D" }
        }
        Method {
            name: "lookAt"
            revision: 257
            type: "QQuaternion"
            Parameter { name: "sourcePosition"; type: "QVector3D" }
            Parameter { name: "targetPosition"; type: "QVector3D" }
        }
    }
    Component {
        file: "private/qquick3drepeater_p.h"
        name: "QQuick3DRepeater"
        accessSemantics: "reference"
        defaultProperty: "delegate"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Repeater3D 1.14", "QtQuick3D/Repeater3D 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "model"; type: "QVariant" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "objectAdded"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "object"; type: "QQuick3DObject"; isPointer: true }
        }
        Signal {
            name: "objectRemoved"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "object"; type: "QQuick3DObject"; isPointer: true }
        }
        Method {
            name: "createdObject"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "initObject"
            Parameter { type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "modelUpdated"
            Parameter { name: "changeSet"; type: "QQmlChangeSet" }
            Parameter { name: "reset"; type: "bool" }
        }
        Method {
            name: "objectAt"
            type: "QQuick3DObject*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "private/qquick3dsceneenvironment_p.h"
        name: "QQuick3DSceneEnvironment"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: [
            "QtQuick3D/SceneEnvironment 1.14",
            "QtQuick3D/SceneEnvironment 6.0"
        ]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "QQuick3DEnvironmentAAModeValues"
            values: ["NoAA", "SSAA", "MSAA", "ProgressiveAA"]
        }
        Enum {
            name: "QQuick3DEnvironmentAAQualityValues"
            values: ["Medium", "High", "VeryHigh"]
        }
        Enum {
            name: "QQuick3DEnvironmentBackgroundTypes"
            values: ["Transparent", "Unspecified", "Color", "SkyBox"]
        }
        Enum {
            name: "QQuick3DEnvironmentTonemapModes"
            values: [
                "TonemapModeNone",
                "TonemapModeLinear",
                "TonemapModeAces",
                "TonemapModeHejlDawson",
                "TonemapModeFilmic"
            ]
        }
        Property { name: "antialiasingMode"; type: "QQuick3DEnvironmentAAModeValues" }
        Property { name: "antialiasingQuality"; type: "QQuick3DEnvironmentAAQualityValues" }
        Property { name: "temporalAAEnabled"; type: "bool" }
        Property { name: "temporalAAStrength"; type: "float" }
        Property { name: "backgroundMode"; type: "QQuick3DEnvironmentBackgroundTypes" }
        Property { name: "clearColor"; type: "QColor" }
        Property { name: "depthTestEnabled"; type: "bool" }
        Property { name: "depthPrePassEnabled"; type: "bool" }
        Property { name: "aoStrength"; type: "float" }
        Property { name: "aoDistance"; type: "float" }
        Property { name: "aoSoftness"; type: "float" }
        Property { name: "aoDither"; type: "bool" }
        Property { name: "aoSampleRate"; type: "int" }
        Property { name: "aoBias"; type: "float" }
        Property { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "probeExposure"; type: "float" }
        Property { name: "probeHorizon"; type: "float" }
        Property { name: "probeOrientation"; type: "QVector3D" }
        Property { name: "tonemapMode"; type: "QQuick3DEnvironmentTonemapModes" }
        Property { name: "effects"; revision: 257; type: "QQuick3DEffect"; isList: true; isReadonly: true }
        Method {
            name: "setAntialiasingMode"
            Parameter { name: "antialiasingMode"; type: "QQuick3DEnvironmentAAModeValues" }
        }
        Method {
            name: "setAntialiasingQuality"
            Parameter { name: "antialiasingQuality"; type: "QQuick3DEnvironmentAAQualityValues" }
        }
        Method {
            name: "setTemporalAAEnabled"
            Parameter { name: "temporalAAEnabled"; type: "bool" }
        }
        Method {
            name: "setTemporalAAStrength"
            Parameter { name: "strength"; type: "float" }
        }
        Method {
            name: "setBackgroundMode"
            Parameter { name: "backgroundMode"; type: "QQuick3DEnvironmentBackgroundTypes" }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "clearColor"; type: "QColor" }
        }
        Method {
            name: "setAoStrength"
            Parameter { name: "aoStrength"; type: "float" }
        }
        Method {
            name: "setAoDistance"
            Parameter { name: "aoDistance"; type: "float" }
        }
        Method {
            name: "setAoSoftness"
            Parameter { name: "aoSoftness"; type: "float" }
        }
        Method {
            name: "setAoDither"
            Parameter { name: "aoDither"; type: "bool" }
        }
        Method {
            name: "setAoSampleRate"
            Parameter { name: "aoSampleRate"; type: "int" }
        }
        Method {
            name: "setAoBias"
            Parameter { name: "aoBias"; type: "float" }
        }
        Method {
            name: "setLightProbe"
            Parameter { name: "lightProbe"; type: "QQuick3DTexture"; isPointer: true }
        }
        Method {
            name: "setProbeExposure"
            Parameter { name: "probeExposure"; type: "float" }
        }
        Method {
            name: "setProbeHorizon"
            Parameter { name: "probeHorizon"; type: "float" }
        }
        Method {
            name: "setProbeOrientation"
            Parameter { name: "orientation"; type: "QVector3D" }
        }
        Method {
            name: "setDepthTestEnabled"
            Parameter { name: "depthTestEnabled"; type: "bool" }
        }
        Method {
            name: "setDepthPrePassEnabled"
            Parameter { name: "depthPrePassEnabled"; type: "bool" }
        }
        Method {
            name: "setTonemapMode"
            Parameter { name: "tonemapMode"; type: "QQuick3DEnvironmentTonemapModes" }
        }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsApplyValue"
        accessSemantics: "reference"
        prototype: "QQuick3DShaderUtilsRenderCommand"
        exports: [
            "QtQuick3D/SetUniformValue 1.15",
            "QtQuick3D/SetUniformValue 6.0"
        ]
        exportMetaObjectRevisions: [271, 1536]
        Property { name: "target"; type: "QByteArray"; isReadonly: true }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsBuffer"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Buffer 1.14", "QtQuick3D/Buffer 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "TextureFilterOperation"
            values: ["Unknown", "Nearest", "Linear"]
        }
        Enum {
            name: "TextureCoordOperation"
            values: ["Unknown", "ClampToEdge", "MirroredRepeat", "Repeat"]
        }
        Enum {
            name: "AllocateBufferFlagValues"
            values: ["None", "SceneLifetime"]
        }
        Enum {
            name: "TextureFormat"
            values: [
                "Unknown",
                "RGBA8",
                "RGBA16F",
                "RGBA32F",
                "R8",
                "R16",
                "R16F",
                "R32F"
            ]
        }
        Property { name: "format"; type: "TextureFormat" }
        Property { name: "textureFilterOperation"; type: "TextureFilterOperation" }
        Property { name: "textureCoordOperation"; type: "TextureCoordOperation" }
        Property { name: "sizeMultiplier"; type: "float"; isReadonly: true }
        Property { name: "bufferFlags"; type: "AllocateBufferFlagValues" }
        Property { name: "name"; type: "QByteArray"; isReadonly: true }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsBufferInput"
        accessSemantics: "reference"
        prototype: "QQuick3DShaderUtilsRenderCommand"
        exports: ["QtQuick3D/BufferInput 1.14", "QtQuick3D/BufferInput 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "buffer"; type: "QQuick3DShaderUtilsBuffer"; isPointer: true }
        Property { name: "sampler"; type: "QByteArray"; isReadonly: true }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsRenderCommand"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Command 1.14", "QtQuick3D/Command 6.0"]
        exportMetaObjectRevisions: [270, 1536]
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsRenderPass"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Pass 1.14", "QtQuick3D/Pass 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property {
            name: "commands"
            type: "QQuick3DShaderUtilsRenderCommand"
            isList: true
            isReadonly: true
        }
        Property { name: "output"; type: "QQuick3DShaderUtilsBuffer"; isReadonly: true; isPointer: true }
        Property { name: "shaders"; type: "QQuick3DShaderUtilsShader"; isList: true; isReadonly: true }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsShader"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/Shader 1.14", "QtQuick3D/Shader 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "Stage"
            values: ["Vertex", "Fragment"]
        }
        Property { name: "shader"; type: "QUrl"; isReadonly: true }
        Property { name: "stage"; type: "Stage"; isReadonly: true }
    }
    Component {
        file: "private/qquick3dshaderutils_p.h"
        name: "QQuick3DShaderUtilsTextureInput"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["QtQuick3D/TextureInput 1.14", "QtQuick3D/TextureInput 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Property { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        Property { name: "enabled"; type: "bool"; isReadonly: true }
        Method {
            name: "setTexture"
            Parameter { name: "texture"; type: "QQuick3DTexture"; isPointer: true }
        }
    }
    Component {
        file: "private/qquick3dskeleton_p.h"
        name: "QQuick3DSkeleton"
        accessSemantics: "reference"
        prototype: "QQuick3DNode"
        exports: ["QtQuick3D/Skeleton 1.15", "QtQuick3D/Skeleton 6.0"]
        exportMetaObjectRevisions: [271, 1536]
        Signal { name: "skeletonNodeDirty" }
    }
    Component {
        file: "private/qquick3dspotlight_p.h"
        name: "QQuick3DSpotLight"
        accessSemantics: "reference"
        prototype: "QQuick3DAbstractLight"
        exports: ["QtQuick3D/SpotLight 1.15", "QtQuick3D/SpotLight 6.0"]
        exportMetaObjectRevisions: [271, 1536]
        Property { name: "constantFade"; type: "float" }
        Property { name: "linearFade"; type: "float" }
        Property { name: "quadraticFade"; type: "float" }
        Property { name: "coneAngle"; type: "float" }
        Property { name: "innerConeAngle"; type: "float" }
        Method {
            name: "setConstantFade"
            Parameter { name: "constantFade"; type: "float" }
        }
        Method {
            name: "setLinearFade"
            Parameter { name: "linearFade"; type: "float" }
        }
        Method {
            name: "setQuadraticFade"
            Parameter { name: "quadraticFade"; type: "float" }
        }
        Method {
            name: "setConeAngle"
            Parameter { name: "coneAngle"; type: "float" }
        }
        Method {
            name: "setInnerConeAngle"
            Parameter { name: "innerConeAngle"; type: "float" }
        }
    }
    Component {
        file: "private/qquick3dtexture_p.h"
        name: "QQuick3DTexture"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/Texture 1.14", "QtQuick3D/Texture 6.0"]
        exportMetaObjectRevisions: [270, 1536]
        Enum {
            name: "MappingMode"
            values: ["UV", "Environment", "LightProbe"]
        }
        Enum {
            name: "TilingMode"
            values: ["ClampToEdge", "MirroredRepeat", "Repeat"]
        }
        Enum {
            name: "Filter"
            values: ["None", "Nearest", "Linear"]
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "textureData"; type: "QQuick3DTextureData"; isPointer: true }
        Property { name: "scaleU"; type: "float" }
        Property { name: "scaleV"; type: "float" }
        Property { name: "mappingMode"; type: "MappingMode" }
        Property { name: "tilingModeHorizontal"; type: "TilingMode" }
        Property { name: "tilingModeVertical"; type: "TilingMode" }
        Property { name: "rotationUV"; type: "float" }
        Property { name: "positionU"; type: "float" }
        Property { name: "positionV"; type: "float" }
        Property { name: "pivotU"; type: "float" }
        Property { name: "pivotV"; type: "float" }
        Property { name: "flipV"; type: "bool" }
        Property { name: "indexUV"; type: "int" }
        Property { name: "magFilter"; type: "Filter" }
        Property { name: "minFilter"; type: "Filter" }
        Property { name: "mipFilter"; type: "Filter" }
        Property { name: "generateMipmaps"; type: "bool" }
        Signal { name: "horizontalTilingChanged" }
        Signal { name: "verticalTilingChanged" }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSourceItem"
            Parameter { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setScaleU"
            Parameter { name: "scaleU"; type: "float" }
        }
        Method {
            name: "setScaleV"
            Parameter { name: "scaleV"; type: "float" }
        }
        Method {
            name: "setMappingMode"
            Parameter { name: "mappingMode"; type: "MappingMode" }
        }
        Method {
            name: "setHorizontalTiling"
            Parameter { name: "tilingModeHorizontal"; type: "TilingMode" }
        }
        Method {
            name: "setVerticalTiling"
            Parameter { name: "tilingModeVertical"; type: "TilingMode" }
        }
        Method {
            name: "setRotationUV"
            Parameter { name: "rotationUV"; type: "float" }
        }
        Method {
            name: "setPositionU"
            Parameter { name: "positionU"; type: "float" }
        }
        Method {
            name: "setPositionV"
            Parameter { name: "positionV"; type: "float" }
        }
        Method {
            name: "setPivotU"
            Parameter { name: "pivotU"; type: "float" }
        }
        Method {
            name: "setPivotV"
            Parameter { name: "pivotV"; type: "float" }
        }
        Method {
            name: "setFlipV"
            Parameter { name: "flipV"; type: "bool" }
        }
        Method {
            name: "setIndexUV"
            Parameter { name: "indexUV"; type: "int" }
        }
        Method {
            name: "setMagFilter"
            Parameter { name: "magFilter"; type: "Filter" }
        }
        Method {
            name: "setMinFilter"
            Parameter { name: "minFilter"; type: "Filter" }
        }
        Method {
            name: "setMipFilter"
            Parameter { name: "mipFilter"; type: "Filter" }
        }
        Method {
            name: "setTextureData"
            Parameter { name: "textureData"; type: "QQuick3DTextureData"; isPointer: true }
        }
        Method {
            name: "setGenerateMipmaps"
            Parameter { name: "generateMipmaps"; type: "bool" }
        }
        Method {
            name: "sourceItemDestroyed"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        file: "qquick3dtexturedata.h"
        name: "QQuick3DTextureData"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuick3DObject"
        exports: ["QtQuick3D/TextureData 6.0"]
        isCreatable: false
        exportMetaObjectRevisions: [1536]
        Enum {
            name: "Format"
            values: [
                "None",
                "RGBA8",
                "RGBA16F",
                "RGBA32F",
                "RGBE8",
                "R8",
                "R16",
                "R16F",
                "R32F",
                "BC1",
                "BC2",
                "BC3",
                "BC4",
                "BC5",
                "BC6H",
                "BC7",
                "DXT1_RGBA",
                "DXT1_RGB",
                "DXT3_RGBA",
                "DXT5_RGBA",
                "ETC2_RGB8",
                "ETC2_RGB8A1",
                "ETC2_RGBA8",
                "ASTC_4x4",
                "ASTC_5x4",
                "ASTC_5x5",
                "ASTC_6x5",
                "ASTC_6x6",
                "ASTC_8x5",
                "ASTC_8x6",
                "ASTC_8x8",
                "ASTC_10x5",
                "ASTC_10x6",
                "ASTC_10x8",
                "ASTC_10x10",
                "ASTC_12x10",
                "ASTC_12x12"
            ]
        }
        Signal { name: "textureDataNodeDirty" }
    }
    Component {
        file: "private/qquick3dviewport_p.h"
        name: "QQuick3DViewport"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtQuick3D/View3D 1.14",
            "QtQuick3D/View3D 2.0",
            "QtQuick3D/View3D 2.1",
            "QtQuick3D/View3D 2.4",
            "QtQuick3D/View3D 2.7",
            "QtQuick3D/View3D 2.11",
            "QtQuick3D/View3D 6.0"
        ]
        exportMetaObjectRevisions: [270, 512, 513, 516, 519, 523, 1536]
        Enum {
            name: "RenderMode"
            values: ["Offscreen", "Underlay", "Overlay", "Inline"]
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        Property { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        Property { name: "scene"; type: "QQuick3DNode"; isReadonly: true; isPointer: true }
        Property { name: "importScene"; type: "QQuick3DNode"; isPointer: true }
        Property { name: "renderMode"; type: "RenderMode" }
        Property { name: "renderStats"; type: "QQuick3DRenderStats"; isReadonly: true; isPointer: true }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "QQuick3DCamera"; isPointer: true }
        }
        Method {
            name: "setEnvironment"
            Parameter { name: "environment"; type: "QQuick3DSceneEnvironment"; isPointer: true }
        }
        Method {
            name: "setImportScene"
            Parameter { name: "inScene"; type: "QQuick3DNode"; isPointer: true }
        }
        Method {
            name: "setRenderMode"
            Parameter { name: "renderMode"; type: "RenderMode" }
        }
        Method { name: "cleanupDirectRenderer" }
        Method { name: "invalidateSceneGraph" }
        Method { name: "cleanupResources" }
        Method {
            name: "mapFrom3DScene"
            type: "QVector3D"
            Parameter { name: "scenePos"; type: "QVector3D" }
        }
        Method {
            name: "mapTo3DScene"
            type: "QVector3D"
            Parameter { name: "viewPos"; type: "QVector3D" }
        }
        Method {
            name: "pick"
            type: "QQuick3DPickResult"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
    }
}
